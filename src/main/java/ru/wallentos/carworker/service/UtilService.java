package ru.wallentos.carworker.service;

import static ru.wallentos.carworker.configuration.ConfigDataPool.CNY;
import static ru.wallentos.carworker.configuration.ConfigDataPool.EUR;
import static ru.wallentos.carworker.configuration.ConfigDataPool.KRW;
import static ru.wallentos.carworker.configuration.ConfigDataPool.RUB;
import static ru.wallentos.carworker.configuration.ConfigDataPool.USD;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ru.wallentos.carworker.exceptions.GetCarDetailException;

@Service
@Slf4j
public class UtilService {
    private static final String VALUE = "Value";
    @Autowired
    private ObjectMapper mapper;

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –∏–∑ JSON –¶–ë –∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EUR (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
     */
    protected Map<String, Double> backRatesToConversionRatesMap(String jsonString) {
        double rubRateTmp;
        double usdRate;
        double krwRate;
        double cnyRate;
        try {
            var valutes = mapper.readTree(jsonString).get("Valute");

            rubRateTmp = valutes.get(EUR).get(VALUE).asDouble();
            usdRate = rubRateTmp / valutes.get(USD).get(VALUE).asDouble();
            cnyRate = rubRateTmp / valutes.get(CNY).get(VALUE).asDouble();
            krwRate = rubRateTmp / valutes.get(KRW).get(VALUE).asDouble() * 1000;

        } catch (JsonMappingException e) {
            throw new RuntimeException(e);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }

        Map<String, Double> conversionRatesMap = new HashMap<>();
        conversionRatesMap.put(RUB, rubRateTmp);
        conversionRatesMap.put(USD, usdRate);
        conversionRatesMap.put(CNY, cnyRate);
        conversionRatesMap.put(KRW, krwRate);
        return conversionRatesMap;
    }

    /**
     * –í—ã—Ç–∞—â–∏—Ç—å –∏–∑ —Å—Å—ã–ª–∫–∏ carId.
     */
    public String parseLinkToCarId(String link) throws GetCarDetailException {
        try {
            if (link.contains("fem.encar.com")) {
                return parseFemEncarLinkToCarId(link);
            } else if (link.contains("encar.com")) {
                return parseEncarLinkToCarId(link);
            } else if (link.contains("pcm.che168.com")) {
                return parseMobileCheCarLinkToCarId(link);
            } else if (link.contains("che168.com")) {
                return parseCheCarLinkToCarId(link);
            } else {
                throw new RuntimeException("–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ " + link);
            }
        } catch (Exception e) {
            String errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏";
            log.error(errorMessage);
            throw new GetCarDetailException(errorMessage);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ.
     *
     * @param link
     * @return
     */
    public String defineCurrencyByLink(String link) throws GetCarDetailException {
        if (link.contains("encar")) {
            return KRW;
        } else if (link.contains("che168")) {
            return CNY;
        } else {
            String errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏";
            log.error(errorMessage);
            throw new GetCarDetailException(errorMessage);
        }
    }

    /**
     * –í—ã—Ç–∞—â–∏—Ç—å –∏–∑ —Å—Å—ã–ª–∫–∏ fem.encar.com.
     */
    public String parseFemEncarLinkToCarId(String link) {
        Pattern pattern = Pattern.compile("detail\\/(\\d{8})");
        Matcher matcher = pattern.matcher(link);
        matcher.find();
        return matcher.group(1);
    }

    /**
     * –í—ã—Ç–∞—â–∏—Ç—å –∏–∑ —Å—Å—ã–ª–∫–∏ encar.com.
     */
    public String parseEncarLinkToCarId(String link) {
        Pattern pattern = Pattern.compile("carid=(\\d{8})");
        Matcher matcher = pattern.matcher(link);
        matcher.find();
        return matcher.group(1);
    }

    /**
     * –í—ã—Ç–∞—â–∏—Ç—å id –∏–∑ —Å—Å—ã–ª–∫–∏ che168.com.
     */
    public String parseCheCarLinkToCarId(String link) {
        Pattern pattern = Pattern.compile("\\/(\\d+)\\.html");
        Matcher matcher = pattern.matcher(link);
        matcher.find();
        return matcher.group(1);
    }

    /**
     * –í—ã—Ç–∞—â–∏—Ç—å id –∏–∑ —Å—Å—ã–ª–∫–∏ pem.che168.com.
     */
    public String parseMobileCheCarLinkToCarId(String link) {
        Pattern pattern = Pattern.compile("infoid=(\\d{8})");
        Matcher matcher = pattern.matcher(link);
        matcher.find();
        return matcher.group(1);
    }

    /**
     * –í—ã—Ç–∞—â–∏—Ç—å siteKey —Å–æ —Å—Ç—Ä–æ–∫–∏ –∫–∞–ø—Ç—á–∏.
     */
    public String parseCaptchaKey(String string) {
        Pattern pattern = Pattern.compile("execute\\(\\'(.+?(?=\\'))");
        Matcher matcher = pattern.matcher(string);
        matcher.find();
        return matcher.group(1);
    }

    /**
     * –í—ã—Ç–∞—â–∏—Ç—å action —Å–æ —Å—Ç—Ä–æ–∫–∏ –∫–∞–ø—Ç—á–∏.
     */
    public String parseCaptchaAction(String string) {
        Pattern pattern = Pattern.compile("action: \\'(.+?(?=\\'))");
        Matcher matcher = pattern.matcher(string);
        matcher.find();
        return matcher.group(1);
    }

    /**
     * –í—ã—Ç–∞—â–∏—Ç—å –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ che168.
     */
    public String parseCheCarPower(String string) {
        Pattern pattern = Pattern.compile("ÊéíÈáè\\(mL\\)\\\", \"id\": \\d+, \"value\\\": \\\"(\\d+)");
        Matcher matcher = pattern.matcher(string);
        if (matcher.find()) {
            return matcher.group(1);
        } else return "0";
    }


    /**
     * –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
     */
    public String getEncarLinkStringByCarId(int carId) {
        return carId != 0 ? String.format("""
                                
                <a href="https://fem.encar.com/cars/detail/%d">üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>
                """, carId) : "";
    }

    /**
     * –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
     *
     * @param carId
     * @return
     */
    public String getEncarInspectLinkStringByCarId(int carId) {
        return carId != 0 ? String.format("""
                                
                <a href="https://fem.encar.com/cars/report/inspect/%d">üîó–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤üîó</a>
                """, carId) : "";
    }

    public String getProvinceStringByProvinceNameAndPrice(String provinceName,
                                                          double provincePriceInRub) {
        return Objects.nonNull(provinceName) ? String.format("""
                                
                –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ %s –¥–æ –°—É–π—Ñ—ã–Ω—å—Ö—ç: %,.0f ‚ÇΩ
                """, provinceName, provincePriceInRub) : """
                                
                –ê–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –°—É–π—Ñ—ã–Ω—å—Ö—ç –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –∞–≤—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.
                """;
    }

    public String getCheCarLinkStringByCarId(int carId) {
        return carId != 0 ? String.format("""
                                
                <a href="https://www.che168.com/dealer/416034/%d.html">üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>
                """, carId) : "";
    }
}
